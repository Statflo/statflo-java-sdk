/*
 * Statflo API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4.1.164
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.statflo.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
/**
 * UserCreate
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-10-20T19:08:04.794115153Z[Etc/UTC]")

public class UserCreate {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("username")
  private String username = null;

  @SerializedName("firstName")
  private String firstName = null;

  @SerializedName("lastName")
  private String lastName = null;

  @SerializedName("company")
  private String company = null;

  @SerializedName("email")
  private String email = null;

  @SerializedName("password")
  private String password = null;

  /**
   * Gets or Sets language
   */
  @JsonAdapter(LanguageEnum.Adapter.class)
  public enum LanguageEnum {
    @SerializedName("en")
    EN("en"),
    @SerializedName("fr")
    FR("fr");

    private String value;

    LanguageEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static LanguageEnum fromValue(String input) {
      for (LanguageEnum b : LanguageEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<LanguageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LanguageEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public LanguageEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return LanguageEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("language")
  private LanguageEnum language = LanguageEnum.EN;

  @SerializedName("salesRepId")
  private String salesRepId = null;

  @SerializedName("externalLocationId")
  private String externalLocationId = null;

  @SerializedName("districtId")
  private Integer districtId = null;

  @SerializedName("regionId")
  private Integer regionId = null;

  @SerializedName("lastLogin")
  private OffsetDateTime lastLogin = null;

  @SerializedName("phoneNumber")
  private String phoneNumber = null;

  @SerializedName("timezone")
  private String timezone = null;

  /**
   * Gets or Sets theme
   */
  @JsonAdapter(ThemeEnum.Adapter.class)
  public enum ThemeEnum {
    @SerializedName("0")
    NUMBER_0(0),
    @SerializedName("1")
    NUMBER_1(1),
    @SerializedName("2")
    NUMBER_2(2);

    private Integer value;

    ThemeEnum(Integer value) {
      this.value = value;
    }
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ThemeEnum fromValue(Integer input) {
      for (ThemeEnum b : ThemeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ThemeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ThemeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ThemeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextInt();
        return ThemeEnum.fromValue((Integer)(value));
      }
    }
  }  @SerializedName("theme")
  private ThemeEnum theme = ThemeEnum.NUMBER_2;

  @SerializedName("token")
  private String token = null;

  @SerializedName("tokenParagon")
  private String tokenParagon = null;

  @SerializedName("userActive")
  private Boolean userActive = true;

  @SerializedName("inboundAvailable")
  private Boolean inboundAvailable = false;

  @SerializedName("jobTitle")
  private String jobTitle = null;

  @SerializedName("acceptedTermsConditions")
  private Boolean acceptedTermsConditions = null;

  @SerializedName("appointmentReminderEmail")
  private Boolean appointmentReminderEmail = true;

  @SerializedName("dealerId")
  private Integer dealerId = null;

  @SerializedName("roleId")
  private Integer roleId = 2;

  @SerializedName("dateAdded")
  private OffsetDateTime dateAdded = null;

  @SerializedName("permissions")
  private List<Object> permissions = new ArrayList<>();

  @SerializedName("outletId")
  private String outletId = null;

  public UserCreate id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(required = true, description = "")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public UserCreate username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Get username
   * @return username
  **/
  @Schema(required = true, description = "")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public UserCreate firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @Schema(required = true, description = "")
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

  public UserCreate lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @Schema(required = true, description = "")
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }

  public UserCreate company(String company) {
    this.company = company;
    return this;
  }

   /**
   * Get company
   * @return company
  **/
  @Schema(description = "")
  public String getCompany() {
    return company;
  }

  public void setCompany(String company) {
    this.company = company;
  }

  public UserCreate email(String email) {
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @Schema(required = true, description = "")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public UserCreate password(String password) {
    this.password = password;
    return this;
  }

   /**
   * Get password
   * @return password
  **/
  @Schema(required = true, description = "")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public UserCreate language(LanguageEnum language) {
    this.language = language;
    return this;
  }

   /**
   * Get language
   * @return language
  **/
  @Schema(description = "")
  public LanguageEnum getLanguage() {
    return language;
  }

  public void setLanguage(LanguageEnum language) {
    this.language = language;
  }

  public UserCreate salesRepId(String salesRepId) {
    this.salesRepId = salesRepId;
    return this;
  }

   /**
   * Get salesRepId
   * @return salesRepId
  **/
  @Schema(description = "")
  public String getSalesRepId() {
    return salesRepId;
  }

  public void setSalesRepId(String salesRepId) {
    this.salesRepId = salesRepId;
  }

  public UserCreate externalLocationId(String externalLocationId) {
    this.externalLocationId = externalLocationId;
    return this;
  }

   /**
   * Get externalLocationId
   * @return externalLocationId
  **/
  @Schema(description = "")
  public String getExternalLocationId() {
    return externalLocationId;
  }

  public void setExternalLocationId(String externalLocationId) {
    this.externalLocationId = externalLocationId;
  }

  public UserCreate districtId(Integer districtId) {
    this.districtId = districtId;
    return this;
  }

   /**
   * Get districtId
   * @return districtId
  **/
  @Schema(description = "")
  public Integer getDistrictId() {
    return districtId;
  }

  public void setDistrictId(Integer districtId) {
    this.districtId = districtId;
  }

  public UserCreate regionId(Integer regionId) {
    this.regionId = regionId;
    return this;
  }

   /**
   * Get regionId
   * @return regionId
  **/
  @Schema(description = "")
  public Integer getRegionId() {
    return regionId;
  }

  public void setRegionId(Integer regionId) {
    this.regionId = regionId;
  }

  public UserCreate lastLogin(OffsetDateTime lastLogin) {
    this.lastLogin = lastLogin;
    return this;
  }

   /**
   * Get lastLogin
   * @return lastLogin
  **/
  @Schema(description = "")
  public OffsetDateTime getLastLogin() {
    return lastLogin;
  }

  public void setLastLogin(OffsetDateTime lastLogin) {
    this.lastLogin = lastLogin;
  }

  public UserCreate phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

   /**
   * Get phoneNumber
   * @return phoneNumber
  **/
  @Schema(description = "")
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }

  public UserCreate timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

   /**
   * Get timezone
   * @return timezone
  **/
  @Schema(description = "")
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }

  public UserCreate theme(ThemeEnum theme) {
    this.theme = theme;
    return this;
  }

   /**
   * Get theme
   * @return theme
  **/
  @Schema(description = "")
  public ThemeEnum getTheme() {
    return theme;
  }

  public void setTheme(ThemeEnum theme) {
    this.theme = theme;
  }

  public UserCreate token(String token) {
    this.token = token;
    return this;
  }

   /**
   * Get token
   * @return token
  **/
  @Schema(description = "")
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }

  public UserCreate tokenParagon(String tokenParagon) {
    this.tokenParagon = tokenParagon;
    return this;
  }

   /**
   * Get tokenParagon
   * @return tokenParagon
  **/
  @Schema(description = "")
  public String getTokenParagon() {
    return tokenParagon;
  }

  public void setTokenParagon(String tokenParagon) {
    this.tokenParagon = tokenParagon;
  }

  public UserCreate userActive(Boolean userActive) {
    this.userActive = userActive;
    return this;
  }

   /**
   * Get userActive
   * @return userActive
  **/
  @Schema(description = "")
  public Boolean isUserActive() {
    return userActive;
  }

  public void setUserActive(Boolean userActive) {
    this.userActive = userActive;
  }

  public UserCreate inboundAvailable(Boolean inboundAvailable) {
    this.inboundAvailable = inboundAvailable;
    return this;
  }

   /**
   * Get inboundAvailable
   * @return inboundAvailable
  **/
  @Schema(description = "")
  public Boolean isInboundAvailable() {
    return inboundAvailable;
  }

  public void setInboundAvailable(Boolean inboundAvailable) {
    this.inboundAvailable = inboundAvailable;
  }

  public UserCreate jobTitle(String jobTitle) {
    this.jobTitle = jobTitle;
    return this;
  }

   /**
   * Get jobTitle
   * @return jobTitle
  **/
  @Schema(description = "")
  public String getJobTitle() {
    return jobTitle;
  }

  public void setJobTitle(String jobTitle) {
    this.jobTitle = jobTitle;
  }

  public UserCreate acceptedTermsConditions(Boolean acceptedTermsConditions) {
    this.acceptedTermsConditions = acceptedTermsConditions;
    return this;
  }

   /**
   * Get acceptedTermsConditions
   * @return acceptedTermsConditions
  **/
  @Schema(description = "")
  public Boolean isAcceptedTermsConditions() {
    return acceptedTermsConditions;
  }

  public void setAcceptedTermsConditions(Boolean acceptedTermsConditions) {
    this.acceptedTermsConditions = acceptedTermsConditions;
  }

  public UserCreate appointmentReminderEmail(Boolean appointmentReminderEmail) {
    this.appointmentReminderEmail = appointmentReminderEmail;
    return this;
  }

   /**
   * Get appointmentReminderEmail
   * @return appointmentReminderEmail
  **/
  @Schema(description = "")
  public Boolean isAppointmentReminderEmail() {
    return appointmentReminderEmail;
  }

  public void setAppointmentReminderEmail(Boolean appointmentReminderEmail) {
    this.appointmentReminderEmail = appointmentReminderEmail;
  }

  public UserCreate dealerId(Integer dealerId) {
    this.dealerId = dealerId;
    return this;
  }

   /**
   * Get dealerId
   * @return dealerId
  **/
  @Schema(required = true, description = "")
  public Integer getDealerId() {
    return dealerId;
  }

  public void setDealerId(Integer dealerId) {
    this.dealerId = dealerId;
  }

  public UserCreate roleId(Integer roleId) {
    this.roleId = roleId;
    return this;
  }

   /**
   * Get roleId
   * @return roleId
  **/
  @Schema(required = true, description = "")
  public Integer getRoleId() {
    return roleId;
  }

  public void setRoleId(Integer roleId) {
    this.roleId = roleId;
  }

  public UserCreate dateAdded(OffsetDateTime dateAdded) {
    this.dateAdded = dateAdded;
    return this;
  }

   /**
   * Get dateAdded
   * @return dateAdded
  **/
  @Schema(description = "")
  public OffsetDateTime getDateAdded() {
    return dateAdded;
  }

  public void setDateAdded(OffsetDateTime dateAdded) {
    this.dateAdded = dateAdded;
  }

  public UserCreate permissions(List<Object> permissions) {
    this.permissions = permissions;
    return this;
  }

  public UserCreate addPermissionsItem(Object permissionsItem) {
    this.permissions.add(permissionsItem);
    return this;
  }

   /**
   * Get permissions
   * @return permissions
  **/
  @Schema(required = true, description = "")
  public List<Object> getPermissions() {
    return permissions;
  }

  public void setPermissions(List<Object> permissions) {
    this.permissions = permissions;
  }

  public UserCreate outletId(String outletId) {
    this.outletId = outletId;
    return this;
  }

   /**
   * Get outletId
   * @return outletId
  **/
  @Schema(description = "")
  public String getOutletId() {
    return outletId;
  }

  public void setOutletId(String outletId) {
    this.outletId = outletId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserCreate userCreate = (UserCreate) o;
    return Objects.equals(this.id, userCreate.id) &&
        Objects.equals(this.username, userCreate.username) &&
        Objects.equals(this.firstName, userCreate.firstName) &&
        Objects.equals(this.lastName, userCreate.lastName) &&
        Objects.equals(this.company, userCreate.company) &&
        Objects.equals(this.email, userCreate.email) &&
        Objects.equals(this.password, userCreate.password) &&
        Objects.equals(this.language, userCreate.language) &&
        Objects.equals(this.salesRepId, userCreate.salesRepId) &&
        Objects.equals(this.externalLocationId, userCreate.externalLocationId) &&
        Objects.equals(this.districtId, userCreate.districtId) &&
        Objects.equals(this.regionId, userCreate.regionId) &&
        Objects.equals(this.lastLogin, userCreate.lastLogin) &&
        Objects.equals(this.phoneNumber, userCreate.phoneNumber) &&
        Objects.equals(this.timezone, userCreate.timezone) &&
        Objects.equals(this.theme, userCreate.theme) &&
        Objects.equals(this.token, userCreate.token) &&
        Objects.equals(this.tokenParagon, userCreate.tokenParagon) &&
        Objects.equals(this.userActive, userCreate.userActive) &&
        Objects.equals(this.inboundAvailable, userCreate.inboundAvailable) &&
        Objects.equals(this.jobTitle, userCreate.jobTitle) &&
        Objects.equals(this.acceptedTermsConditions, userCreate.acceptedTermsConditions) &&
        Objects.equals(this.appointmentReminderEmail, userCreate.appointmentReminderEmail) &&
        Objects.equals(this.dealerId, userCreate.dealerId) &&
        Objects.equals(this.roleId, userCreate.roleId) &&
        Objects.equals(this.dateAdded, userCreate.dateAdded) &&
        Objects.equals(this.permissions, userCreate.permissions) &&
        Objects.equals(this.outletId, userCreate.outletId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, username, firstName, lastName, company, email, password, language, salesRepId, externalLocationId, districtId, regionId, lastLogin, phoneNumber, timezone, theme, token, tokenParagon, userActive, inboundAvailable, jobTitle, acceptedTermsConditions, appointmentReminderEmail, dealerId, roleId, dateAdded, permissions, outletId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserCreate {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    salesRepId: ").append(toIndentedString(salesRepId)).append("\n");
    sb.append("    externalLocationId: ").append(toIndentedString(externalLocationId)).append("\n");
    sb.append("    districtId: ").append(toIndentedString(districtId)).append("\n");
    sb.append("    regionId: ").append(toIndentedString(regionId)).append("\n");
    sb.append("    lastLogin: ").append(toIndentedString(lastLogin)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    theme: ").append(toIndentedString(theme)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    tokenParagon: ").append(toIndentedString(tokenParagon)).append("\n");
    sb.append("    userActive: ").append(toIndentedString(userActive)).append("\n");
    sb.append("    inboundAvailable: ").append(toIndentedString(inboundAvailable)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    acceptedTermsConditions: ").append(toIndentedString(acceptedTermsConditions)).append("\n");
    sb.append("    appointmentReminderEmail: ").append(toIndentedString(appointmentReminderEmail)).append("\n");
    sb.append("    dealerId: ").append(toIndentedString(dealerId)).append("\n");
    sb.append("    roleId: ").append(toIndentedString(roleId)).append("\n");
    sb.append("    dateAdded: ").append(toIndentedString(dateAdded)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    outletId: ").append(toIndentedString(outletId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
